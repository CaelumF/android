import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens
import com.toggl.buildsrc.Libs

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'dagger.hilt.android.plugin'

kapt {
    correctErrorTypes = true
    useBuildCache = true
}

android {
    compileSdkVersion buildConfig.compileSdk
    defaultConfig {
        // the applicationId needs to be replaced with "com.toggl.giskard" so that we can replace the current production app
        // also, when testing analytics/crashlytics/firebase, the actual package should be used (or a placeholder firebase project)
        applicationId "com.toggl.aurora"
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk
        versionCode buildConfig.versionCode
        versionName buildConfig.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            manifestPlaceholders = [crashlytics: "true"]
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        adhoc {
            manifestPlaceholders = [crashlytics: "true"]
            applicationIdSuffix ".adhoc"
            versionNameSuffix "-adhoc"
        }
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            ext.enableCrashlytics = false
            manifestPlaceholders = [crashlytics: "false"]
            crunchPngs false

            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {
    coreLibraryDesugaring Libs.Android.desugarJdkLibs

    implementation project(':calendar')
    implementation project(':settings')
    implementation project(':database-android')
    implementation project(':onboarding')
    implementation project(':reports')
    implementation project(':repository')
    implementation project(':timer')
    implementation project(':mock-data')

    implementation Libs.Android.customTabs
    implementation Libs.AndroidX.Preference.core
    implementation Libs.AndroidX.Preference.ktx
    implementation Libs.AndroidX.Hilt.viewModel
    kapt Libs.AndroidX.Hilt.compiler
    implementation Libs.Kotlin.stdlib
    implementation Libs.Hilt.hilt
    kapt Libs.Hilt.compiler
    implementation Libs.Google.firebaseCore
    implementation Libs.Google.firebaseCrashlytics
    implementation Libs.Google.firebasePerformance
    implementation Libs.Google.ossLicences
    debugImplementation Libs.leakCanary

    testImplementation Libs.Test.Jupiter.api
    testRuntimeOnly Libs.Test.Jupiter.engine
    testRuntimeOnly Libs.Test.Jupiter.params
    testImplementation Libs.Test.kotestMatchers
    testImplementation Libs.slf4j
    testImplementation Libs.Test.mockk
    testImplementation Libs.Test.kotlinTest
    testImplementation Libs.Test.kotlinTestJunit
    testImplementation Libs.Test.kotlinCoroutineTest
    androidTestImplementation Libs.AndroidX.Test.runner
    androidTestImplementation Libs.AndroidX.Test.espressoCore
}

task prepareGooglePlayServices(type: Copy) {
    from './google-services.json.template'
    into "$buildDir/tmp-google-services"

    def googleProps = [
            TOGGL_GCM_SENDER_ID                                        : System.getenv('TOGGL_GCM_SENDER_ID') ?: 'TOGGL_GCM_SENDER_ID',
            TOGGL_DATABASE_URL                                         : System.getenv('TOGGL_DATABASE_URL') ?: 'TOGGL_DATABASE_URL',
            TOGGL_PROJECT_ID                                           : System.getenv('TOGGL_PROJECT_ID') ?: 'TOGGL_PROJECT_ID',
            TOGGL_STORAGE_BUCKET                                       : System.getenv('TOGGL_STORAGE_BUCKET') ?: 'TOGGL_STORAGE_BUCKET',
            TOGGL_DROID_GOOGLE_SERVICES_MOBILE_SDK_APP_ID              : System.getenv('TOGGL_DROID_GOOGLE_SERVICES_MOBILE_SDK_APP_ID') ?: 'TOGGL_DROID_GOOGLE_SERVICES_MOBILE_SDK_APP_ID',
            TOGGL_DROID_GOOGLE_SERVICES_CLIENT_ID                      : System.getenv('TOGGL_DROID_GOOGLE_SERVICES_CLIENT_ID') ?: 'TOGGL_DROID_GOOGLE_SERVICES_CLIENT_ID',
            TOGGL_DROID_GOOGLE_SERVICES_API_KEY                        : System.getenv('TOGGL_DROID_GOOGLE_SERVICES_API_KEY') ?: 'TOGGL_DROID_GOOGLE_SERVICES_API_KEY',
            TOGGL_DROID_DEBUG_GOOGLE_SERVICES_MOBILE_SDK_APP_ID_STAGING: System.getenv('TOGGL_DROID_DEBUG_GOOGLE_SERVICES_MOBILE_SDK_APP_ID_STAGING') ?: 'TOGGL_DROID_DEBUG_GOOGLE_SERVICES_MOBILE_SDK_APP_ID_STAGING',
            TOGGL_DROID_ADHOC_GOOGLE_SERVICES_MOBILE_SDK_APP_ID_STAGING: System.getenv('TOGGL_DROID_ADHOC_GOOGLE_SERVICES_MOBILE_SDK_APP_ID_STAGING') ?: 'TOGGL_DROID_ADHOC_GOOGLE_SERVICES_MOBILE_SDK_APP_ID_STAGING',
            TOGGL_IOS_GOOGLE_SERVICES_CLIENT_ID                        : System.getenv('TOGGL_IOS_GOOGLE_SERVICES_CLIENT_ID') ?: 'TOGGL_IOS_GOOGLE_SERVICES_CLIENT_ID',
    ]

    def CommentsFilter = {
        line -> line.trim().startsWith("//") ? null : line
    }

    expand(googleProps)
    filter(FixCrLfFilter)
    googleProps.each {
        prop -> filter(ReplaceTokens, tokens: [ (prop.key): prop.value])
    }
    filter(CommentsFilter)

    filteringCharset = 'UTF-8'

    doLast {
        copy {
            from "$buildDir/tmp-google-services/google-services.json.template"
            into '.'
            rename { 'google-services.json' }
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.matches("\\.*process\\w+GoogleServices\$")) {
        task.dependsOn prepareGooglePlayServices
    }
}

